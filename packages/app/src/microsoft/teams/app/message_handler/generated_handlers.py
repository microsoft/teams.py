"""
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the MIT License.

GENERATED FILE - DO NOT EDIT MANUALLY
This file is generated by generate_handlers.py based on activity_config.py
"""

from abc import ABC, abstractmethod
from logging import Logger
from typing import Callable, Optional

from microsoft.teams.api.activities import (
    Activity,
    AdaptiveCardInvokeActivity,
    CommandResultActivity,
    CommandSendActivity,
    ConfigFetchInvokeActivity,
    ConfigSubmitInvokeActivity,
    ConversationUpdateActivity,
    EndOfConversationActivity,
    EventActivity,
    ExecuteActionInvokeActivity,
    FileConsentInvokeActivity,
    HandoffActionInvokeActivity,
    HandoffActivity,
    InstallUpdateActivity,
    InvokeActivity,
    MeetingEndEventActivity,
    MeetingParticipantJoinEventActivity,
    MeetingParticipantLeaveEventActivity,
    MeetingStartEventActivity,
    MessageActivity,
    MessageDeleteActivity,
    MessageExtensionAnonQueryLinkInvokeActivity,
    MessageExtensionCardButtonClickedInvokeActivity,
    MessageExtensionFetchTaskInvokeActivity,
    MessageExtensionQueryInvokeActivity,
    MessageExtensionQueryLinkInvokeActivity,
    MessageExtensionQuerySettingUrlInvokeActivity,
    MessageExtensionSelectItemInvokeActivity,
    MessageExtensionSettingInvokeActivity,
    MessageExtensionSubmitActionInvokeActivity,
    MessageInvokeActivity,
    MessageReactionActivity,
    MessageUpdateActivity,
    ReadReceiptEventActivity,
    SignInTokenExchangeInvokeActivity,
    SignInVerifyStateInvokeActivity,
    TabFetchInvokeActivity,
    TabSubmitInvokeActivity,
    TaskFetchInvokeActivity,
    TaskSubmitInvokeActivity,
    TraceActivity,
    TypingActivity,
)
from microsoft.teams.api.models.invoke_response import (
    AdaptiveCardInvokeResponse,
    ConfigInvokeResponse,
    MessagingExtensionActionInvokeResponse,
    MessagingExtensionInvokeResponse,
    TabInvokeResponse,
    TaskModuleInvokeResponse,
    TokenExchangeInvokeResponseType,
    VoidInvokeResponse,
)

from ..router import ActivityRouter
from .activity_config import ACTIVITY_ROUTES
from .activity_context import Context
from .type_validation import validate_handler_type


class ActivityHandlerMixin(ABC):
    """Mixin class providing typed activity handler registration methods."""

    @property
    @abstractmethod
    def router(self) -> ActivityRouter:
        """The activity router instance. Must be implemented by the concrete class."""
        pass

    @property
    @abstractmethod
    def logger(self) -> Logger:
        """The logger instance used by the app."""
        pass

    def onMessage(self, handler: Callable[[Context[MessageActivity]], None]) -> Callable:
        """Register a message activity handler."""

        def decorator(func: Callable[[Context[MessageActivity]], None]) -> Callable:
            validate_handler_type(self.logger, func, MessageActivity, "onMessage", "MessageActivity")
            config = ACTIVITY_ROUTES["message"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onMessageDelete(self, handler: Callable[[Context[MessageDeleteActivity]], None]) -> Callable:
        """Register a messageDelete activity handler."""

        def decorator(func: Callable[[Context[MessageDeleteActivity]], None]) -> Callable:
            validate_handler_type(self.logger, func, MessageDeleteActivity, "onMessageDelete", "MessageDeleteActivity")
            config = ACTIVITY_ROUTES["messageDelete"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onSoftDeleteMessage(self, handler: Callable[[Context[MessageDeleteActivity]], None]) -> Callable:
        """Register a softDeleteMessage activity handler."""

        def decorator(func: Callable[[Context[MessageDeleteActivity]], None]) -> Callable:
            validate_handler_type(
                self.logger, func, MessageDeleteActivity, "onSoftDeleteMessage", "MessageDeleteActivity"
            )
            config = ACTIVITY_ROUTES["softDeleteMessage"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onMessageReaction(self, handler: Callable[[Context[MessageReactionActivity]], None]) -> Callable:
        """Register a messageReaction activity handler."""

        def decorator(func: Callable[[Context[MessageReactionActivity]], None]) -> Callable:
            validate_handler_type(
                self.logger, func, MessageReactionActivity, "onMessageReaction", "MessageReactionActivity"
            )
            config = ACTIVITY_ROUTES["messageReaction"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onMessageUpdate(self, handler: Callable[[Context[MessageUpdateActivity]], None]) -> Callable:
        """Register a messageUpdate activity handler."""

        def decorator(func: Callable[[Context[MessageUpdateActivity]], None]) -> Callable:
            validate_handler_type(self.logger, func, MessageUpdateActivity, "onMessageUpdate", "MessageUpdateActivity")
            config = ACTIVITY_ROUTES["messageUpdate"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onUndeleteMessage(self, handler: Callable[[Context[MessageUpdateActivity]], None]) -> Callable:
        """Register a undeleteMessage activity handler."""

        def decorator(func: Callable[[Context[MessageUpdateActivity]], None]) -> Callable:
            validate_handler_type(
                self.logger, func, MessageUpdateActivity, "onUndeleteMessage", "MessageUpdateActivity"
            )
            config = ACTIVITY_ROUTES["undeleteMessage"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onEditMessage(self, handler: Callable[[Context[MessageUpdateActivity]], None]) -> Callable:
        """Register a editMessage activity handler."""

        def decorator(func: Callable[[Context[MessageUpdateActivity]], None]) -> Callable:
            validate_handler_type(self.logger, func, MessageUpdateActivity, "onEditMessage", "MessageUpdateActivity")
            config = ACTIVITY_ROUTES["editMessage"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onCommand(self, handler: Callable[[Context[CommandSendActivity]], None]) -> Callable:
        """Register a command activity handler."""

        def decorator(func: Callable[[Context[CommandSendActivity]], None]) -> Callable:
            validate_handler_type(self.logger, func, CommandSendActivity, "onCommand", "CommandSendActivity")
            config = ACTIVITY_ROUTES["command"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onCommandResult(self, handler: Callable[[Context[CommandResultActivity]], None]) -> Callable:
        """Register a commandResult activity handler."""

        def decorator(func: Callable[[Context[CommandResultActivity]], None]) -> Callable:
            validate_handler_type(self.logger, func, CommandResultActivity, "onCommandResult", "CommandResultActivity")
            config = ACTIVITY_ROUTES["commandResult"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onConversationUpdate(self, handler: Callable[[Context[ConversationUpdateActivity]], None]) -> Callable:
        """Register a conversationUpdate activity handler."""

        def decorator(func: Callable[[Context[ConversationUpdateActivity]], None]) -> Callable:
            validate_handler_type(
                self.logger, func, ConversationUpdateActivity, "onConversationUpdate", "ConversationUpdateActivity"
            )
            config = ACTIVITY_ROUTES["conversationUpdate"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onChannelCreated(self, handler: Callable[[Context[ConversationUpdateActivity]], None]) -> Callable:
        """Register a channelCreated activity handler."""

        def decorator(func: Callable[[Context[ConversationUpdateActivity]], None]) -> Callable:
            validate_handler_type(
                self.logger, func, ConversationUpdateActivity, "onChannelCreated", "ConversationUpdateActivity"
            )
            config = ACTIVITY_ROUTES["channelCreated"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onChannelDeleted(self, handler: Callable[[Context[ConversationUpdateActivity]], None]) -> Callable:
        """Register a channelDeleted activity handler."""

        def decorator(func: Callable[[Context[ConversationUpdateActivity]], None]) -> Callable:
            validate_handler_type(
                self.logger, func, ConversationUpdateActivity, "onChannelDeleted", "ConversationUpdateActivity"
            )
            config = ACTIVITY_ROUTES["channelDeleted"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onChannelRenamed(self, handler: Callable[[Context[ConversationUpdateActivity]], None]) -> Callable:
        """Register a channelRenamed activity handler."""

        def decorator(func: Callable[[Context[ConversationUpdateActivity]], None]) -> Callable:
            validate_handler_type(
                self.logger, func, ConversationUpdateActivity, "onChannelRenamed", "ConversationUpdateActivity"
            )
            config = ACTIVITY_ROUTES["channelRenamed"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onChannelRestored(self, handler: Callable[[Context[ConversationUpdateActivity]], None]) -> Callable:
        """Register a channelRestored activity handler."""

        def decorator(func: Callable[[Context[ConversationUpdateActivity]], None]) -> Callable:
            validate_handler_type(
                self.logger, func, ConversationUpdateActivity, "onChannelRestored", "ConversationUpdateActivity"
            )
            config = ACTIVITY_ROUTES["channelRestored"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onTeamArchived(self, handler: Callable[[Context[ConversationUpdateActivity]], None]) -> Callable:
        """Register a teamArchived activity handler."""

        def decorator(func: Callable[[Context[ConversationUpdateActivity]], None]) -> Callable:
            validate_handler_type(
                self.logger, func, ConversationUpdateActivity, "onTeamArchived", "ConversationUpdateActivity"
            )
            config = ACTIVITY_ROUTES["teamArchived"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onTeamDeleted(self, handler: Callable[[Context[ConversationUpdateActivity]], None]) -> Callable:
        """Register a teamDeleted activity handler."""

        def decorator(func: Callable[[Context[ConversationUpdateActivity]], None]) -> Callable:
            validate_handler_type(
                self.logger, func, ConversationUpdateActivity, "onTeamDeleted", "ConversationUpdateActivity"
            )
            config = ACTIVITY_ROUTES["teamDeleted"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onTeamHardDeleted(self, handler: Callable[[Context[ConversationUpdateActivity]], None]) -> Callable:
        """Register a teamHardDeleted activity handler."""

        def decorator(func: Callable[[Context[ConversationUpdateActivity]], None]) -> Callable:
            validate_handler_type(
                self.logger, func, ConversationUpdateActivity, "onTeamHardDeleted", "ConversationUpdateActivity"
            )
            config = ACTIVITY_ROUTES["teamHardDeleted"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onTeamRenamed(self, handler: Callable[[Context[ConversationUpdateActivity]], None]) -> Callable:
        """Register a teamRenamed activity handler."""

        def decorator(func: Callable[[Context[ConversationUpdateActivity]], None]) -> Callable:
            validate_handler_type(
                self.logger, func, ConversationUpdateActivity, "onTeamRenamed", "ConversationUpdateActivity"
            )
            config = ACTIVITY_ROUTES["teamRenamed"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onTeamRestored(self, handler: Callable[[Context[ConversationUpdateActivity]], None]) -> Callable:
        """Register a teamRestored activity handler."""

        def decorator(func: Callable[[Context[ConversationUpdateActivity]], None]) -> Callable:
            validate_handler_type(
                self.logger, func, ConversationUpdateActivity, "onTeamRestored", "ConversationUpdateActivity"
            )
            config = ACTIVITY_ROUTES["teamRestored"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onTeamUnarchived(self, handler: Callable[[Context[ConversationUpdateActivity]], None]) -> Callable:
        """Register a teamUnarchived activity handler."""

        def decorator(func: Callable[[Context[ConversationUpdateActivity]], None]) -> Callable:
            validate_handler_type(
                self.logger, func, ConversationUpdateActivity, "onTeamUnarchived", "ConversationUpdateActivity"
            )
            config = ACTIVITY_ROUTES["teamUnarchived"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onEndOfConversation(self, handler: Callable[[Context[EndOfConversationActivity]], None]) -> Callable:
        """Register a endOfConversation activity handler."""

        def decorator(func: Callable[[Context[EndOfConversationActivity]], None]) -> Callable:
            validate_handler_type(
                self.logger, func, EndOfConversationActivity, "onEndOfConversation", "EndOfConversationActivity"
            )
            config = ACTIVITY_ROUTES["endOfConversation"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onEvent(self, handler: Callable[[Context[EventActivity]], None]) -> Callable:
        """Register a event activity handler."""

        def decorator(func: Callable[[Context[EventActivity]], None]) -> Callable:
            validate_handler_type(self.logger, func, EventActivity, "onEvent", "EventActivity")
            config = ACTIVITY_ROUTES["event"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onReadReceipt(self, handler: Callable[[Context[ReadReceiptEventActivity]], None]) -> Callable:
        """Register a readReceipt activity handler."""

        def decorator(func: Callable[[Context[ReadReceiptEventActivity]], None]) -> Callable:
            validate_handler_type(
                self.logger, func, ReadReceiptEventActivity, "onReadReceipt", "ReadReceiptEventActivity"
            )
            config = ACTIVITY_ROUTES["readReceipt"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onMeetingStart(self, handler: Callable[[Context[MeetingStartEventActivity]], None]) -> Callable:
        """Register a meetingStart activity handler."""

        def decorator(func: Callable[[Context[MeetingStartEventActivity]], None]) -> Callable:
            validate_handler_type(
                self.logger, func, MeetingStartEventActivity, "onMeetingStart", "MeetingStartEventActivity"
            )
            config = ACTIVITY_ROUTES["meetingStart"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onMeetingEnd(self, handler: Callable[[Context[MeetingEndEventActivity]], None]) -> Callable:
        """Register a meetingEnd activity handler."""

        def decorator(func: Callable[[Context[MeetingEndEventActivity]], None]) -> Callable:
            validate_handler_type(self.logger, func, MeetingEndEventActivity, "onMeetingEnd", "MeetingEndEventActivity")
            config = ACTIVITY_ROUTES["meetingEnd"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onMeetingParticipantJoin(
        self, handler: Callable[[Context[MeetingParticipantJoinEventActivity]], None]
    ) -> Callable:
        """Register a meetingParticipantJoin activity handler."""

        def decorator(func: Callable[[Context[MeetingParticipantJoinEventActivity]], None]) -> Callable:
            validate_handler_type(
                self.logger,
                func,
                MeetingParticipantJoinEventActivity,
                "onMeetingParticipantJoin",
                "MeetingParticipantJoinEventActivity",
            )
            config = ACTIVITY_ROUTES["meetingParticipantJoin"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onMeetingParticipantLeave(
        self, handler: Callable[[Context[MeetingParticipantLeaveEventActivity]], None]
    ) -> Callable:
        """Register a meetingParticipantLeave activity handler."""

        def decorator(func: Callable[[Context[MeetingParticipantLeaveEventActivity]], None]) -> Callable:
            validate_handler_type(
                self.logger,
                func,
                MeetingParticipantLeaveEventActivity,
                "onMeetingParticipantLeave",
                "MeetingParticipantLeaveEventActivity",
            )
            config = ACTIVITY_ROUTES["meetingParticipantLeave"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onConfigOpen(
        self, handler: Callable[[Context[ConfigFetchInvokeActivity]], Optional[ConfigInvokeResponse]]
    ) -> Callable:
        """Register a config.open activity handler."""

        def decorator(func: Callable[[Context[ConfigFetchInvokeActivity]], Optional[ConfigInvokeResponse]]) -> Callable:
            validate_handler_type(
                self.logger, func, ConfigFetchInvokeActivity, "onConfigOpen", "ConfigFetchInvokeActivity"
            )
            config = ACTIVITY_ROUTES["config.open"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onConfigSubmit(
        self, handler: Callable[[Context[ConfigSubmitInvokeActivity]], Optional[ConfigInvokeResponse]]
    ) -> Callable:
        """Register a config.submit activity handler."""

        def decorator(
            func: Callable[[Context[ConfigSubmitInvokeActivity]], Optional[ConfigInvokeResponse]],
        ) -> Callable:
            validate_handler_type(
                self.logger, func, ConfigSubmitInvokeActivity, "onConfigSubmit", "ConfigSubmitInvokeActivity"
            )
            config = ACTIVITY_ROUTES["config.submit"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onFileConsent(
        self, handler: Callable[[Context[FileConsentInvokeActivity]], Optional[VoidInvokeResponse]]
    ) -> Callable:
        """Register a file.consent activity handler."""

        def decorator(func: Callable[[Context[FileConsentInvokeActivity]], Optional[VoidInvokeResponse]]) -> Callable:
            validate_handler_type(
                self.logger, func, FileConsentInvokeActivity, "onFileConsent", "FileConsentInvokeActivity"
            )
            config = ACTIVITY_ROUTES["file.consent"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onMessageExecute(
        self, handler: Callable[[Context[ExecuteActionInvokeActivity]], Optional[VoidInvokeResponse]]
    ) -> Callable:
        """Register a message.execute activity handler."""

        def decorator(func: Callable[[Context[ExecuteActionInvokeActivity]], Optional[VoidInvokeResponse]]) -> Callable:
            validate_handler_type(
                self.logger, func, ExecuteActionInvokeActivity, "onMessageExecute", "ExecuteActionInvokeActivity"
            )
            config = ACTIVITY_ROUTES["message.execute"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onMessageExtQueryLink(
        self,
        handler: Callable[
            [Context[MessageExtensionQueryLinkInvokeActivity]], Optional[MessagingExtensionInvokeResponse]
        ],
    ) -> Callable:
        """Register a message.ext.query-link activity handler."""

        def decorator(
            func: Callable[
                [Context[MessageExtensionQueryLinkInvokeActivity]], Optional[MessagingExtensionInvokeResponse]
            ],
        ) -> Callable:
            validate_handler_type(
                self.logger,
                func,
                MessageExtensionQueryLinkInvokeActivity,
                "onMessageExtQueryLink",
                "MessageExtensionQueryLinkInvokeActivity",
            )
            config = ACTIVITY_ROUTES["message.ext.query-link"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onMessageExtAnonQueryLink(
        self,
        handler: Callable[
            [Context[MessageExtensionAnonQueryLinkInvokeActivity]], Optional[MessagingExtensionInvokeResponse]
        ],
    ) -> Callable:
        """Register a message.ext.anon-query-link activity handler."""

        def decorator(
            func: Callable[
                [Context[MessageExtensionAnonQueryLinkInvokeActivity]], Optional[MessagingExtensionInvokeResponse]
            ],
        ) -> Callable:
            validate_handler_type(
                self.logger,
                func,
                MessageExtensionAnonQueryLinkInvokeActivity,
                "onMessageExtAnonQueryLink",
                "MessageExtensionAnonQueryLinkInvokeActivity",
            )
            config = ACTIVITY_ROUTES["message.ext.anon-query-link"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onMessageExtQuery(
        self,
        handler: Callable[[Context[MessageExtensionQueryInvokeActivity]], Optional[MessagingExtensionInvokeResponse]],
    ) -> Callable:
        """Register a message.ext.query activity handler."""

        def decorator(
            func: Callable[[Context[MessageExtensionQueryInvokeActivity]], Optional[MessagingExtensionInvokeResponse]],
        ) -> Callable:
            validate_handler_type(
                self.logger,
                func,
                MessageExtensionQueryInvokeActivity,
                "onMessageExtQuery",
                "MessageExtensionQueryInvokeActivity",
            )
            config = ACTIVITY_ROUTES["message.ext.query"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onMessageExtSelectItem(
        self,
        handler: Callable[
            [Context[MessageExtensionSelectItemInvokeActivity]], Optional[MessagingExtensionInvokeResponse]
        ],
    ) -> Callable:
        """Register a message.ext.select-item activity handler."""

        def decorator(
            func: Callable[
                [Context[MessageExtensionSelectItemInvokeActivity]], Optional[MessagingExtensionInvokeResponse]
            ],
        ) -> Callable:
            validate_handler_type(
                self.logger,
                func,
                MessageExtensionSelectItemInvokeActivity,
                "onMessageExtSelectItem",
                "MessageExtensionSelectItemInvokeActivity",
            )
            config = ACTIVITY_ROUTES["message.ext.select-item"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onMessageExtSubmit(
        self,
        handler: Callable[
            [Context[MessageExtensionSubmitActionInvokeActivity]], Optional[MessagingExtensionActionInvokeResponse]
        ],
    ) -> Callable:
        """Register a message.ext.submit activity handler."""

        def decorator(
            func: Callable[
                [Context[MessageExtensionSubmitActionInvokeActivity]], Optional[MessagingExtensionActionInvokeResponse]
            ],
        ) -> Callable:
            validate_handler_type(
                self.logger,
                func,
                MessageExtensionSubmitActionInvokeActivity,
                "onMessageExtSubmit",
                "MessageExtensionSubmitActionInvokeActivity",
            )
            config = ACTIVITY_ROUTES["message.ext.submit"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onMessageExtOpen(
        self,
        handler: Callable[
            [Context[MessageExtensionFetchTaskInvokeActivity]], Optional[MessagingExtensionActionInvokeResponse]
        ],
    ) -> Callable:
        """Register a message.ext.open activity handler."""

        def decorator(
            func: Callable[
                [Context[MessageExtensionFetchTaskInvokeActivity]], Optional[MessagingExtensionActionInvokeResponse]
            ],
        ) -> Callable:
            validate_handler_type(
                self.logger,
                func,
                MessageExtensionFetchTaskInvokeActivity,
                "onMessageExtOpen",
                "MessageExtensionFetchTaskInvokeActivity",
            )
            config = ACTIVITY_ROUTES["message.ext.open"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onMessageExtQuerySettingsUrl(
        self,
        handler: Callable[
            [Context[MessageExtensionQuerySettingUrlInvokeActivity]], Optional[MessagingExtensionInvokeResponse]
        ],
    ) -> Callable:
        """Register a message.ext.query-settings-url activity handler."""

        def decorator(
            func: Callable[
                [Context[MessageExtensionQuerySettingUrlInvokeActivity]], Optional[MessagingExtensionInvokeResponse]
            ],
        ) -> Callable:
            validate_handler_type(
                self.logger,
                func,
                MessageExtensionQuerySettingUrlInvokeActivity,
                "onMessageExtQuerySettingsUrl",
                "MessageExtensionQuerySettingUrlInvokeActivity",
            )
            config = ACTIVITY_ROUTES["message.ext.query-settings-url"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onMessageExtSetting(
        self,
        handler: Callable[[Context[MessageExtensionSettingInvokeActivity]], Optional[MessagingExtensionInvokeResponse]],
    ) -> Callable:
        """Register a message.ext.setting activity handler."""

        def decorator(
            func: Callable[
                [Context[MessageExtensionSettingInvokeActivity]], Optional[MessagingExtensionInvokeResponse]
            ],
        ) -> Callable:
            validate_handler_type(
                self.logger,
                func,
                MessageExtensionSettingInvokeActivity,
                "onMessageExtSetting",
                "MessageExtensionSettingInvokeActivity",
            )
            config = ACTIVITY_ROUTES["message.ext.setting"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onMessageExtCardButtonClicked(
        self,
        handler: Callable[[Context[MessageExtensionCardButtonClickedInvokeActivity]], Optional[VoidInvokeResponse]],
    ) -> Callable:
        """Register a message.ext.card-button-clicked activity handler."""

        def decorator(
            func: Callable[[Context[MessageExtensionCardButtonClickedInvokeActivity]], Optional[VoidInvokeResponse]],
        ) -> Callable:
            validate_handler_type(
                self.logger,
                func,
                MessageExtensionCardButtonClickedInvokeActivity,
                "onMessageExtCardButtonClicked",
                "MessageExtensionCardButtonClickedInvokeActivity",
            )
            config = ACTIVITY_ROUTES["message.ext.card-button-clicked"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onDialogOpen(
        self, handler: Callable[[Context[TaskFetchInvokeActivity]], Optional[TaskModuleInvokeResponse]]
    ) -> Callable:
        """Register a dialog.open activity handler."""

        def decorator(
            func: Callable[[Context[TaskFetchInvokeActivity]], Optional[TaskModuleInvokeResponse]],
        ) -> Callable:
            validate_handler_type(self.logger, func, TaskFetchInvokeActivity, "onDialogOpen", "TaskFetchInvokeActivity")
            config = ACTIVITY_ROUTES["dialog.open"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onDialogSubmit(
        self, handler: Callable[[Context[TaskSubmitInvokeActivity]], Optional[TaskModuleInvokeResponse]]
    ) -> Callable:
        """Register a dialog.submit activity handler."""

        def decorator(
            func: Callable[[Context[TaskSubmitInvokeActivity]], Optional[TaskModuleInvokeResponse]],
        ) -> Callable:
            validate_handler_type(
                self.logger, func, TaskSubmitInvokeActivity, "onDialogSubmit", "TaskSubmitInvokeActivity"
            )
            config = ACTIVITY_ROUTES["dialog.submit"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onTabOpen(self, handler: Callable[[Context[TabFetchInvokeActivity]], Optional[TabInvokeResponse]]) -> Callable:
        """Register a tab.open activity handler."""

        def decorator(func: Callable[[Context[TabFetchInvokeActivity]], Optional[TabInvokeResponse]]) -> Callable:
            validate_handler_type(self.logger, func, TabFetchInvokeActivity, "onTabOpen", "TabFetchInvokeActivity")
            config = ACTIVITY_ROUTES["tab.open"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onTabSubmit(
        self, handler: Callable[[Context[TabSubmitInvokeActivity]], Optional[TabInvokeResponse]]
    ) -> Callable:
        """Register a tab.submit activity handler."""

        def decorator(func: Callable[[Context[TabSubmitInvokeActivity]], Optional[TabInvokeResponse]]) -> Callable:
            validate_handler_type(self.logger, func, TabSubmitInvokeActivity, "onTabSubmit", "TabSubmitInvokeActivity")
            config = ACTIVITY_ROUTES["tab.submit"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onMessageSubmit(
        self, handler: Callable[[Context[MessageInvokeActivity]], Optional[VoidInvokeResponse]]
    ) -> Callable:
        """Register a message.submit activity handler."""

        def decorator(func: Callable[[Context[MessageInvokeActivity]], Optional[VoidInvokeResponse]]) -> Callable:
            validate_handler_type(self.logger, func, MessageInvokeActivity, "onMessageSubmit", "MessageInvokeActivity")
            config = ACTIVITY_ROUTES["message.submit"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onHandoffAction(
        self, handler: Callable[[Context[HandoffActionInvokeActivity]], Optional[VoidInvokeResponse]]
    ) -> Callable:
        """Register a handoff.action activity handler."""

        def decorator(func: Callable[[Context[HandoffActionInvokeActivity]], Optional[VoidInvokeResponse]]) -> Callable:
            validate_handler_type(
                self.logger, func, HandoffActionInvokeActivity, "onHandoffAction", "HandoffActionInvokeActivity"
            )
            config = ACTIVITY_ROUTES["handoff.action"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onSigninTokenExchange(
        self, handler: Callable[[Context[SignInTokenExchangeInvokeActivity]], Optional[TokenExchangeInvokeResponseType]]
    ) -> Callable:
        """Register a signin.token-exchange activity handler."""

        def decorator(
            func: Callable[[Context[SignInTokenExchangeInvokeActivity]], Optional[TokenExchangeInvokeResponseType]],
        ) -> Callable:
            validate_handler_type(
                self.logger,
                func,
                SignInTokenExchangeInvokeActivity,
                "onSigninTokenExchange",
                "SignInTokenExchangeInvokeActivity",
            )
            config = ACTIVITY_ROUTES["signin.token-exchange"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onSigninVerifyState(
        self, handler: Callable[[Context[SignInVerifyStateInvokeActivity]], Optional[VoidInvokeResponse]]
    ) -> Callable:
        """Register a signin.verify-state activity handler."""

        def decorator(
            func: Callable[[Context[SignInVerifyStateInvokeActivity]], Optional[VoidInvokeResponse]],
        ) -> Callable:
            validate_handler_type(
                self.logger,
                func,
                SignInVerifyStateInvokeActivity,
                "onSigninVerifyState",
                "SignInVerifyStateInvokeActivity",
            )
            config = ACTIVITY_ROUTES["signin.verify-state"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onCardAction(
        self, handler: Callable[[Context[AdaptiveCardInvokeActivity]], Optional[AdaptiveCardInvokeResponse]]
    ) -> Callable:
        """Register a card.action activity handler."""

        def decorator(
            func: Callable[[Context[AdaptiveCardInvokeActivity]], Optional[AdaptiveCardInvokeResponse]],
        ) -> Callable:
            validate_handler_type(
                self.logger, func, AdaptiveCardInvokeActivity, "onCardAction", "AdaptiveCardInvokeActivity"
            )
            config = ACTIVITY_ROUTES["card.action"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onInvoke(self, handler: Callable[[Context[InvokeActivity]], None]) -> Callable:
        """Register a invoke activity handler."""

        def decorator(func: Callable[[Context[InvokeActivity]], None]) -> Callable:
            validate_handler_type(self.logger, func, InvokeActivity, "onInvoke", "InvokeActivity")
            config = ACTIVITY_ROUTES["invoke"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onInstallationUpdate(self, handler: Callable[[Context[InstallUpdateActivity]], None]) -> Callable:
        """Register a installationUpdate activity handler."""

        def decorator(func: Callable[[Context[InstallUpdateActivity]], None]) -> Callable:
            validate_handler_type(
                self.logger, func, InstallUpdateActivity, "onInstallationUpdate", "InstallUpdateActivity"
            )
            config = ACTIVITY_ROUTES["installationUpdate"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onTyping(self, handler: Callable[[Context[TypingActivity]], None]) -> Callable:
        """Register a typing activity handler."""

        def decorator(func: Callable[[Context[TypingActivity]], None]) -> Callable:
            validate_handler_type(self.logger, func, TypingActivity, "onTyping", "TypingActivity")
            config = ACTIVITY_ROUTES["typing"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onTrace(self, handler: Callable[[Context[TraceActivity]], None]) -> Callable:
        """Register a trace activity handler."""

        def decorator(func: Callable[[Context[TraceActivity]], None]) -> Callable:
            validate_handler_type(self.logger, func, TraceActivity, "onTrace", "TraceActivity")
            config = ACTIVITY_ROUTES["trace"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onHandoff(self, handler: Callable[[Context[HandoffActivity]], None]) -> Callable:
        """Register a handoff activity handler."""

        def decorator(func: Callable[[Context[HandoffActivity]], None]) -> Callable:
            validate_handler_type(self.logger, func, HandoffActivity, "onHandoff", "HandoffActivity")
            config = ACTIVITY_ROUTES["handoff"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onActivity(self, handler: Callable[[Context[Activity]], None]) -> Callable:
        """Register a activity activity handler."""

        def decorator(func: Callable[[Context[Activity]], None]) -> Callable:
            validate_handler_type(self.logger, func, Activity, "onActivity", "Activity")
            config = ACTIVITY_ROUTES["activity"]
            self.router.add_handler(config.selector, func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator
