"""
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the MIT License.

GENERATED FILE - DO NOT EDIT MANUALLY
This file is generated by generate_handlers.py to generate the correct typed-activity handlers
"""

from abc import ABC, abstractmethod
from logging import Logger
from typing import Callable, Optional

from microsoft.teams.api.activities import (
    ActivityBase,
    CommandResultActivity,
    CommandSendActivity,
    ConversationUpdateActivity,
    EndOfConversationActivity,
    EventActivity,
    HandoffActivity,
    InstallUpdateActivity,
    InvokeActivity,
    MessageActivity,
    MessageDeleteActivity,
    MessageReactionActivity,
    MessageUpdateActivity,
    TraceActivity,
    TypingActivity,
)

from ..context import Context
from ..router import ActivityRouter
from .type_validation import validate_handler_type


class ActivityHandlerMixin(ABC):
    """Mixin class providing typed activity handler registration methods."""

    @property
    @abstractmethod
    def router(self) -> ActivityRouter:
        """The activity router instance. Must be implemented by the concrete class."""
        pass

    @property
    @abstractmethod
    def logger(self) -> Logger:
        """The logger instance used by the app."""
        pass

    def onMessage(self, handler: Callable[[Context[MessageActivity]], Optional[dict]]) -> Callable:
        """Register a message activity handler."""

        def decorator(func: Callable[[Context[MessageActivity]], Optional[dict]]) -> Callable:
            validate_handler_type(self.logger, func, MessageActivity, "onMessage", "MessageActivity")
            self.router.add_handler("message", func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onMessageDelete(self, handler: Callable[[Context[MessageDeleteActivity]], Optional[dict]]) -> Callable:
        """Register a messageDelete activity handler."""

        def decorator(func: Callable[[Context[MessageDeleteActivity]], Optional[dict]]) -> Callable:
            validate_handler_type(self.logger, func, MessageDeleteActivity, "onMessageDelete", "MessageDeleteActivity")
            self.router.add_handler("messageDelete", func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onMessageReaction(self, handler: Callable[[Context[MessageReactionActivity]], Optional[dict]]) -> Callable:
        """Register a messageReaction activity handler."""

        def decorator(func: Callable[[Context[MessageReactionActivity]], Optional[dict]]) -> Callable:
            validate_handler_type(
                self.logger, func, MessageReactionActivity, "onMessageReaction", "MessageReactionActivity"
            )
            self.router.add_handler("messageReaction", func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onMessageUpdate(self, handler: Callable[[Context[MessageUpdateActivity]], Optional[dict]]) -> Callable:
        """Register a messageUpdate activity handler."""

        def decorator(func: Callable[[Context[MessageUpdateActivity]], Optional[dict]]) -> Callable:
            validate_handler_type(self.logger, func, MessageUpdateActivity, "onMessageUpdate", "MessageUpdateActivity")
            self.router.add_handler("messageUpdate", func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onCommand(self, handler: Callable[[Context[CommandSendActivity]], Optional[dict]]) -> Callable:
        """Register a command activity handler."""

        def decorator(func: Callable[[Context[CommandSendActivity]], Optional[dict]]) -> Callable:
            validate_handler_type(self.logger, func, CommandSendActivity, "onCommand", "CommandSendActivity")
            self.router.add_handler("command", func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onCommandResult(self, handler: Callable[[Context[CommandResultActivity]], Optional[dict]]) -> Callable:
        """Register a commandResult activity handler."""

        def decorator(func: Callable[[Context[CommandResultActivity]], Optional[dict]]) -> Callable:
            validate_handler_type(self.logger, func, CommandResultActivity, "onCommandResult", "CommandResultActivity")
            self.router.add_handler("commandResult", func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onConversationUpdate(
        self, handler: Callable[[Context[ConversationUpdateActivity]], Optional[dict]]
    ) -> Callable:
        """Register a conversationUpdate activity handler."""

        def decorator(func: Callable[[Context[ConversationUpdateActivity]], Optional[dict]]) -> Callable:
            validate_handler_type(
                self.logger, func, ConversationUpdateActivity, "onConversationUpdate", "ConversationUpdateActivity"
            )
            self.router.add_handler("conversationUpdate", func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onEndOfConversation(self, handler: Callable[[Context[EndOfConversationActivity]], Optional[dict]]) -> Callable:
        """Register a endOfConversation activity handler."""

        def decorator(func: Callable[[Context[EndOfConversationActivity]], Optional[dict]]) -> Callable:
            validate_handler_type(
                self.logger, func, EndOfConversationActivity, "onEndOfConversation", "EndOfConversationActivity"
            )
            self.router.add_handler("endOfConversation", func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onEvent(self, handler: Callable[[Context[EventActivity]], Optional[dict]]) -> Callable:
        """Register a event activity handler."""

        def decorator(func: Callable[[Context[EventActivity]], Optional[dict]]) -> Callable:
            validate_handler_type(self.logger, func, EventActivity, "onEvent", "EventActivity")
            self.router.add_handler("event", func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onInvoke(self, handler: Callable[[Context[InvokeActivity]], Optional[dict]]) -> Callable:
        """Register a invoke activity handler."""

        def decorator(func: Callable[[Context[InvokeActivity]], Optional[dict]]) -> Callable:
            validate_handler_type(self.logger, func, InvokeActivity, "onInvoke", "InvokeActivity")
            self.router.add_handler("invoke", func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onInstallationUpdate(self, handler: Callable[[Context[InstallUpdateActivity]], Optional[dict]]) -> Callable:
        """Register a installationUpdate activity handler."""

        def decorator(func: Callable[[Context[InstallUpdateActivity]], Optional[dict]]) -> Callable:
            validate_handler_type(
                self.logger, func, InstallUpdateActivity, "onInstallationUpdate", "InstallUpdateActivity"
            )
            self.router.add_handler("installationUpdate", func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onTyping(self, handler: Callable[[Context[TypingActivity]], Optional[dict]]) -> Callable:
        """Register a typing activity handler."""

        def decorator(func: Callable[[Context[TypingActivity]], Optional[dict]]) -> Callable:
            validate_handler_type(self.logger, func, TypingActivity, "onTyping", "TypingActivity")
            self.router.add_handler("typing", func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onTrace(self, handler: Callable[[Context[TraceActivity]], Optional[dict]]) -> Callable:
        """Register a trace activity handler."""

        def decorator(func: Callable[[Context[TraceActivity]], Optional[dict]]) -> Callable:
            validate_handler_type(self.logger, func, TraceActivity, "onTrace", "TraceActivity")
            self.router.add_handler("trace", func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onHandoff(self, handler: Callable[[Context[HandoffActivity]], Optional[dict]]) -> Callable:
        """Register a handoff activity handler."""

        def decorator(func: Callable[[Context[HandoffActivity]], Optional[dict]]) -> Callable:
            validate_handler_type(self.logger, func, HandoffActivity, "onHandoff", "HandoffActivity")
            self.router.add_handler("handoff", func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator

    def onActivity(self, handler: Callable[[Context[ActivityBase]], Optional[dict]]) -> Callable:
        """Register a activity activity handler."""

        def decorator(func: Callable[[Context[ActivityBase]], Optional[dict]]) -> Callable:
            validate_handler_type(self.logger, func, ActivityBase, "onActivity", "ActivityBase")
            self.router.add_handler("activity", func)
            return func

        if handler is not None:
            return decorator(handler)
        return decorator
